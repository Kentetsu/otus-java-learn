До оптимизации
--------------------------------------
|ИСПОЛЬЗУЕМЫЙ HEAP | ВРЕМЯ ВЫПОЛНЕНИЯ|
--------------------------------------
|256M              |125s             |
|512M              |127s             |
|600M              |122s             |
|670M              |122s             |
|700M              |122s             |
|718M              |124s             |
|800M              |123s             |
|1024M             |121s             |
|2048M             |117s             |
|3000M             |115s             |
|4096M             |113s             |
|4500M             |113s             |
|6000M             |109s             |
|8192M             |101s             |
--------------------------------------

Список оптимизаций:
1. Анбоксинг int, везде Integer заменён на int
2. Убрана иммутабельность Data для переиспользования Data
3. Добавлен счётчик для быстрого расчёта size, чтобы избавится от вызовов listValues.size()
4. Инициализация listvalue c максимальным значением в 100_000
5. Введена локальная переменная currentValue для избежания излишних вызовов data.getValue()

--------------------------------------
|ИСПОЛЬЗУЕМЫЙ HEAP | ВРЕМЯ ВЫПОЛНЕНИЯ|
--------------------------------------
|256M              |75s              |
|512M              |74s              |
|600M              |73s              |
|670M              |74s              |
|700M              |74s              |
|718M              |74s              |
|800M              |75s              |
|1024M             |74s              |
|2048M             |72s              |
|3000M             |72s              |
|3500M             |72s              |
|4096M             |72s              |
|4500M             |72s              |
|6000M             |72s              |
|8192M             |76s              |
--------------------------------------


Вывод:
До оптимизации минимальное время исполнения наблюдалось при 8192M памяти и это 101s.
После оптимизации оптимальное время исполнение стало 2048M памяти и это 72s.